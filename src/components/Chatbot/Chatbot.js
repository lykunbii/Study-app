import React, { useState, useEffect, useRef } from 'react';
import './Chatbot.css';

const Chatbot = ({ allProducts }) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    { id: 1, text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa EduAI. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?', sender: 'ai' }
  ]);
  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null); // Ref ƒë·ªÉ t·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi

  // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi tin nh·∫Øn khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // H√†m x·ª≠ l√Ω ph·∫£n h·ªìi c·ªßa AI
  const handleAiResponse = (userMessage) => {
    setIsTyping(true);
    const lowerCaseMessage = userMessage.toLowerCase();
    let aiResponseText = "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ mu·ªën h·ªèi v·ªÅ c√°c kh√≥a h·ªçc AI, Machine Learning, Data Science, ho·∫∑c Ti·∫øng Anh kh√¥ng?";
    let suggestedProducts = [];

    // Simple keyword matching for product suggestions
    if (lowerCaseMessage.includes('ti·∫øng anh') || lowerCaseMessage.includes('english')) {
      suggestedProducts = allProducts.filter(p => p.keywords.includes('ti·∫øng anh'));
      if (suggestedProducts.length > 0) {
        aiResponseText = "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ g·ª£i √Ω m·ªôt s·ªë kh√≥a h·ªçc/t√†i li·ªáu ti·∫øng Anh m√† b·∫°n c√≥ th·ªÉ quan t√¢m:";
      } else {
        aiResponseText = "Ch√∫ng t√¥i c√≥ nhi·ªÅu kh√≥a h·ªçc ti·∫øng Anh. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ giao ti·∫øp, luy·ªán thi hay ti·∫øng Anh chuy√™n ng√†nh?";
      }

      if (lowerCaseMessage.includes('ng∆∞·ªùi m·ªπ') || lowerCaseMessage.includes('gi·ªçng m·ªπ') || lowerCaseMessage.includes('american')) {
        suggestedProducts = allProducts.filter(p => p.keywords.includes('ng∆∞·ªùi m·ªπ'));
        if (suggestedProducts.length > 0) {
          aiResponseText = "ƒê·ªÉ h·ªçc ti·∫øng Anh v·ªõi ng∆∞·ªùi M·ªπ, b·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c kh√≥a h·ªçc sau:";
        } else {
          aiResponseText = "Ch√∫ng t√¥i c√≥ c√°c kh√≥a h·ªçc luy·ªán n√≥i ti·∫øng Anh chu·∫©n gi·ªçng M·ªπ. B·∫°n c√≥ mu·ªën t√¥i t√¨m ki·∫øm kh√¥ng?";
        }
      }
    }
    else if (lowerCaseMessage.includes('ai') || lowerCaseMessage.includes('tr√≠ tu·ªá nh√¢n t·∫°o')) {
        suggestedProducts = allProducts.filter(p => p.keywords.includes('ai'));
        if (suggestedProducts.length > 0) {
            aiResponseText = "Tuy·ªát v·ªùi! D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë kh√≥a h·ªçc/t√†i li·ªáu v·ªÅ Tr√≠ tu·ªá nh√¢n t·∫°o m√† t√¥i t√¨m th·∫•y:";
        } else {
            aiResponseText = "Ch√∫ng t√¥i c√≥ r·∫•t nhi·ªÅu t√†i nguy√™n v·ªÅ AI. B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ m·∫£ng n√†o c·ªßa AI?";
        }
    }
    else if (lowerCaseMessage.includes('data science') || lowerCaseMessage.includes('khoa h·ªçc d·ªØ li·ªáu')) {
        suggestedProducts = allProducts.filter(p => p.keywords.includes('khoa h·ªçc d·ªØ li·ªáu'));
        if (suggestedProducts.length > 0) {
            aiResponseText = "ƒê√£ t√¨m th·∫•y c√°c kh√≥a h·ªçc/t√†i li·ªáu v·ªÅ Khoa h·ªçc d·ªØ li·ªáu:";
        } else {
            aiResponseText = "Khoa h·ªçc d·ªØ li·ªáu l√† m·ªôt lƒ©nh v·ª±c r·ªông l·ªõn. B·∫°n mu·ªën t·∫≠p trung v√†o Python, R, hay c√°c c√¥ng c·ª• kh√°c?";
        }
    }
    else if (lowerCaseMessage.includes('kh√≥a h·ªçc') || lowerCaseMessage.includes('t√†i li·ªáu')) {
        aiResponseText = "B·∫°n mu·ªën t√¨m kh√≥a h·ªçc ho·∫∑c t√†i li·ªáu v·ªÅ ch·ªß ƒë·ªÅ g√¨?";
    }
    else if (lowerCaseMessage.includes('ch√†o') || lowerCaseMessage.includes('hello')) {
      aiResponseText = "Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?";
    }
    else if (lowerCaseMessage.includes('c·∫£m ∆°n') || lowerCaseMessage.includes('thank you')) {
        aiResponseText = "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª°!";
    }

    setTimeout(() => {
      setMessages((prevMessages) => [
        ...prevMessages,
        { id: prevMessages.length + 1, text: aiResponseText, sender: 'ai', suggestions: suggestedProducts.length > 0 ? suggestedProducts : null }
      ]);
      setIsTyping(false);
    }, 1500); // Gi·∫£ l·∫≠p th·ªùi gian AI x·ª≠ l√Ω
  };

  const handleSendMessage = () => {
    if (input.trim() === '') return;

    const userMessage = input;
    setMessages((prevMessages) => [...prevMessages, { id: prevMessages.length + 1, text: userMessage, sender: 'user' }]);
    setInput('');
    handleAiResponse(userMessage);
  };

  const handleQuickReply = (replyText) => {
    setInput(replyText);
    handleSendMessage(); // G·ª≠i tin nh·∫Øn nhanh ƒëi
  };

  const handleProductSuggestionClick = (productName) => {
    // Optionally, you can open the product detail modal from here in App.js
    // For now, let's just send a message
    setInput(`T√¥i mu·ªën bi·∫øt th√™m v·ªÅ ${productName}`);
    handleSendMessage();
  };

  return (
    <>
      <button className="chatbot-toggle-button" onClick={() => setIsOpen(!isOpen)}>
        ü§ñ {/* Bi·ªÉu t∆∞·ª£ng chatbot */}
      </button>

      {isOpen && (
        <div className="chatbot-modal-overlay" onClick={() => setIsOpen(false)}>
          <div className="chatbot-container" onClick={(e) => e.stopPropagation()}>
            <div className="chatbot-header">
              <h3>Chatbot EduAI</h3>
              <button className="chatbot-close-button" onClick={() => setIsOpen(false)}>&times;</button>
            </div>
            <div className="chatbot-messages">
              {messages.map((msg) => (
                <div key={msg.id} className={`message-bubble ${msg.sender}`}>
                  {msg.text}
                  {msg.suggestions && msg.suggestions.length > 0 && (
                    <div className="chatbot-product-suggestions">
                      {msg.suggestions.map(product => (
                        <div key={product.id} className="chatbot-product-item" onClick={() => handleProductSuggestionClick(product.name)}>
                          <img src={product.image} alt={product.name} />
                          <div className="product-item-info">
                            <h4>{product.name}</h4>
                            <p>{product.price}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              ))}
              {isTyping && (
                <div className="message-bubble ai is-typing">
                  <div className="typing-indicator">
                    <span></span><span></span><span></span>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} /> {/* D√πng ref ƒë·ªÉ cu·ªôn */}
            </div>
            {/* Quick Replies */}
            <div className="chatbot-quick-replies">
              <button className="quick-reply-button" onClick={() => handleQuickReply('T√¥i mu·ªën h·ªçc ti·∫øng Anh')}>H·ªçc ti·∫øng Anh</button>
              <button className="quick-reply-button" onClick={() => handleQuickReply('T√¨m kh√≥a h·ªçc AI')}>T√¨m kh√≥a h·ªçc AI</button>
              <button className="quick-reply-button" onClick={() => handleQuickReply('T√†i li·ªáu m·ªõi')}>T√†i li·ªáu m·ªõi</button>
              <button className="quick-reply-button" onClick={() => handleQuickReply('Li√™n h·ªá t∆∞ v·∫•n')}>Li√™n h·ªá t∆∞ v·∫•n</button>
            </div>
            <div className="chatbot-input-area">
              <input
                type="text"
                placeholder="G·ª≠i tin nh·∫Øn..."
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === 'Enter') handleSendMessage();
                }}
              />
              <button onClick={handleSendMessage}>
                ‚û°Ô∏è {/* Bi·ªÉu t∆∞·ª£ng g·ª≠i */}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default Chatbot;